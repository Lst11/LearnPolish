// Generated by Dagger (https://google.github.io/dagger).
package com.lst11.domain.usecases;

import com.lst11.domain.executor.PostExecutorThread;
import com.lst11.domain.repositories.WordsRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class GetTranslateUseCase_Factory implements Factory<GetTranslateUseCase> {
  private final Provider<WordsRepository> arg0Provider;

  private final Provider<PostExecutorThread> arg1Provider;

  public GetTranslateUseCase_Factory(
      Provider<WordsRepository> arg0Provider, Provider<PostExecutorThread> arg1Provider) {
    this.arg0Provider = arg0Provider;
    this.arg1Provider = arg1Provider;
  }

  @Override
  public GetTranslateUseCase get() {
    return provideInstance(arg0Provider, arg1Provider);
  }

  public static GetTranslateUseCase provideInstance(
      Provider<WordsRepository> arg0Provider, Provider<PostExecutorThread> arg1Provider) {
    return new GetTranslateUseCase(arg0Provider.get(), arg1Provider.get());
  }

  public static GetTranslateUseCase_Factory create(
      Provider<WordsRepository> arg0Provider, Provider<PostExecutorThread> arg1Provider) {
    return new GetTranslateUseCase_Factory(arg0Provider, arg1Provider);
  }

  public static GetTranslateUseCase newGetTranslateUseCase(
      WordsRepository arg0, PostExecutorThread arg1) {
    return new GetTranslateUseCase(arg0, arg1);
  }
}
