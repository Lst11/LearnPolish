// Generated by Dagger (https://google.github.io/dagger).
package com.gmail.superarch.inject;

import android.content.Context;
import com.lst11.data.db.AppDataBase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DomainModule_ProvideAppDataBaseFactory implements Factory<AppDataBase> {
  private final DomainModule module;

  private final Provider<Context> contextProvider;

  public DomainModule_ProvideAppDataBaseFactory(
      DomainModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public AppDataBase get() {
    return provideInstance(module, contextProvider);
  }

  public static AppDataBase provideInstance(
      DomainModule module, Provider<Context> contextProvider) {
    return proxyProvideAppDataBase(module, contextProvider.get());
  }

  public static DomainModule_ProvideAppDataBaseFactory create(
      DomainModule module, Provider<Context> contextProvider) {
    return new DomainModule_ProvideAppDataBaseFactory(module, contextProvider);
  }

  public static AppDataBase proxyProvideAppDataBase(DomainModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.provideAppDataBase(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
